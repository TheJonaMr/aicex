* SAR testbench
**********************************************************************
**        Copyright (c) 2022 Carsten Wulff Software, Norway
** *******************************************************************
** Created       : wulff at 2022-5-16
** *******************************************************************
**  The MIT License (MIT)
**
**  Permission is hereby granted, free of charge, to any person obtaining a copy
**  of this software and associated documentation files (the "Software"), to deal
**  in the Software without restriction, including without limitation the rights
**  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
**  copies of the Software, and to permit persons to whom the Software is
**  furnished to do so, subject to the following conditions:
**
**  The above copyright notice and this permission notice shall be included in all
**  copies or substantial portions of the Software.
**
**  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**  SOFTWARE.
**
**********************************************************************


*----------------------------------------------------------------
* Include
*----------------------------------------------------------------

#ifdef Lay
*.include ../clpe/SARDIGEX4_CV_lpe.spi
*.include ../clpe/SARCMPX1_CV_lpe.spi
*.include ../clpe/SARBSSW_CV_lpe.spi
*.include ../clpe/CAP32C_CV_lpe.spi
.include "../../../lib/SUN_TR_SKY130N.spi"
.include ../clpe/SAR9B_CV_lpe.spi
*.include ../build/SUN_SAR9B_SK130NM.spice
#else
.include ../build/SUN_SAR9B_SK130NM.spice
#endif



*----------------------------------------------------------------
* Options
*----------------------------------------------------------------
*.option TNOM=27 GMIN=1e-15 reltol=1e-6 abstol=1e-6
*vntol=1u abstol=1p trtol=7 method=trap chgtol=1e-16
#ifdef Debug
.option reltol=1e-3 srcsteps=1 ramptime=10n noopiter keepopinfo gmin=1e-12
#else
.option reltol=1e-5 srcsteps=1 ramptime=10n noopiter keepopinfo gmin=1e-15
#endif

*----------------------------------------------------------------
* PARAMETERS
*----------------------------------------------------------------
.param TRF = 10p

*- Analog parameters
.param AVDD = {vdda}

*- 8 MHz clock frequency
.param PERIOD_CLK = 125n

*- 25% duty-cycle clock
.param PW_CLK = PERIOD_CLK/4

*- Frequency bin of the input signal
.param fbin = 5

*- number of cycles in FFT
.param nbpt = 128

*- Sampling frequency
.param fs = 1/PERIOD_CLK

*- Input frequency for coherent sampling
.param fin = fbin/nbpt*fs

.param vamp = 0.4

*----------------------------------------------------------------
* Sources
*----------------------------------------------------------------
VSS  AVSS 0 dc 0
VDD  AVDD AVSS dc {AVDD}
VREF VREF AVSS dc {AVDD}

*- Control signals
VCLK CLK 0 dc 0 pulse (0 {AVDD} 0 {TRF} {TRF} {PW_CLK} {PERIOD_CLK})

#ifdef Lay
X3 CLK CK_SAMPLE_BSSW AVDD AVSS BFX1_CV
X2 CLK CK_SAMPLE AVDD AVSS BFX1_CV
X1 CK_SAMPLE EN AVDD AVSS IVX1_CV
#else
X3 CLK CK_SAMPLE_BSSW AVDD AVSS AVDD AVSS BFX1_CV
X2 CLK CK_SAMPLE AVDD AVSS AVDD AVSS BFX1_CV
X1 CK_SAMPLE EN AVDD AVSS AVDD AVSS IVX1_CV
#endif

VCM VCM 0 dc {AVDD/2}
VSARP SAR_IP VCM sin (0 {vamp} {fin} )
VSARN SAR_IN VCM sin (0 {-vamp} {fin} )

*----------------------------------------------------------------
* DUT
*----------------------------------------------------------------

XDUT SAR_IP SAR_IN SARN SARP DONE D_8 D_7 D_6 D_5 D_4 D_3 D_2 D_1 D_0 EN CK_SAMPLE CK_SAMPLE_BSSW VREF AVDD AVSS SAR9B_CV

#ifdef Lay

XD1 DONE DDONE AVDD AVSS BFX1_CV
XDFF1 D_8 DDONE AVDD DF_8 QN8 AVDD AVSS DFRNQNX1_CV
XDFF2 D_7 DDONE AVDD DF_7 QN7 AVDD AVSS DFRNQNX1_CV
XDFF3 D_6 DDONE AVDD DF_6 QN6 AVDD AVSS DFRNQNX1_CV
XDFF4 D_5 DDONE AVDD DF_5 QN5 AVDD AVSS DFRNQNX1_CV
XDFF5 D_4 DDONE AVDD DF_4 QN4 AVDD AVSS DFRNQNX1_CV
XDFF6 D_3 DDONE AVDD DF_3 QN3 AVDD AVSS DFRNQNX1_CV
XDFF7 D_2 DDONE AVDD DF_2 QN2 AVDD AVSS DFRNQNX1_CV
XDFF8 D_1 DDONE AVDD DF_1 QN1 AVDD AVSS DFRNQNX1_CV
XDFF9 D_0 DDONE AVDD DF_0 QN0 AVDD AVSS DFRNQNX1_CV

#else

XD1 DONE DDONE AVDD AVSS AVDD AVSS BFX1_CV
XDFF1 D_8 DDONE AVDD DF_8 QN8 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF2 D_7 DDONE AVDD DF_7 QN7 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF3 D_6 DDONE AVDD DF_6 QN6 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF4 D_5 DDONE AVDD DF_5 QN5 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF5 D_4 DDONE AVDD DF_4 QN4 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF6 D_3 DDONE AVDD DF_3 QN3 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF7 D_2 DDONE AVDD DF_2 QN2 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF8 D_1 DDONE AVDD DF_1 QN1 AVDD AVSS AVDD AVSS DFRNQNX1_CV
XDFF9 D_0 DDONE AVDD DF_0 QN0 AVDD AVSS AVDD AVSS DFRNQNX1_CV

#endif

XDAC DF_8 DF_7 DF_6 DF_5 DF_4 DF_3 DF_2 DF_1 DF_0 RO AVDD DAC_9BIT_TWOS_COMPL


*----------------------------------------------------------------
* 8-bit DAC model model
*----------------------------------------------------------------
* integer = -2^8*b8  + 2^7*b7 + 2^6*b6 ... 2^0*b0
.SUBCKT DAC_9BIT_TWOS_COMPL DATA_8 DATA_7 DATA_6 DATA_5 DATA_4 DATA_3 DATA_2 DATA_1 DATA_0 RO VDD
B1 RO_VDD 0 V = -1/2*V(DATA_8) + 1/4*V(DATA_7) + 1/8*V(DATA_6) + 1/16*V(DATA_5) + 1/32*V(DATA_4)+ 1/64*V(DATA_3) + 1/128*V(DATA_2) + 1/256*V(DATA_1) + 1/512*V(DATA_0)
B2 RO 0 V = V(RO_VDD)/V(VDD)
.ENDS


*----------------------------------------------------------------
* Measures
*----------------------------------------------------------------
.measure tran tpd_done trig v(CK_SAMPLE) val='AVDD/2' rise=1 targ v(DONE) val='AVDD/2' rise=1

*----------------------------------------------------------------
* NGSPICE control
*----------------------------------------------------------------

#ifdef Debug
.probe v(SARN) v(SARP) v(RO) v(SAR_IP) v(SAR_IN) V(DONE) v(CK_SAMPLE) v(XDUT.CMP_OP) v(XDUT.CMP_ON)
#else
.probe v(SARN) v(SARP) v(RO) v(SAR_IP) v(SAR_IN) V(DONE) v(CK_SAMPLE)
#endif


.control
set color0=white
set color1=black
unset askquit

#ifdef Debug
tran 1n 400n
quit
#else
*nbpt=64 => 8u
*tran 1n 8.5u
*npbt=128 => 16u
tran 1n 16.5u
write
quit
#endif

.endc

.end
